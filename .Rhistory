?use_vignette
?use_mit_liscense
??use_mit_liscense
usethis::use_mit_license(name="interreg")
SteplmSh <- function(data){
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(MASS)){
install.packages("MASS")
library(MASS)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
ui <- fluidPage(
titlePanel("Stepwise Regression Model" ),
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = colnames(data), selected = 1),
selectInput("method", label = h3("Stepwise Method"),
choices = c("both", "forward", "backward"), selected = 1),
selectInput("examine", label = h3("Choose an Explanatory Variable to Examine"),
choices = colnames(data), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot", height = "700px")), # Plot
tabPanel("Distribution", # Plots of data distributions
fluidRow(
column(6, plotOutput("distribution1", height = "700px", width = "700px")),
column(6, plotOutput("distribution2", height = "300px", width = "300px")))
),
tabPanel("Stepwise Model and Summary Statistics", verbatimTextOutput("summary"), verbatimTextOutput(outputId = 'summarystatistic'), verbatimTextOutput(outputId = 'mml')),
tabPanel("Relative Importance", plotOutput("relative")),
tabPanel("Linear Regression Assumptions", plotOutput("assump")),
tabPanel("Fitted and residuals graph", plotOutput("Fittedgraph")),
tabPanel("Data", DT::dataTableOutput('tbl')), # Data as datatable
tabPanel("Corrmatrix", plotOutput("corrmatrix"), height="700px")
)
)
)
)
# SERVER
server <- function(input, output) {
# Multiple Linear Regression output
output$summary <- renderPrint({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
summary(step.model)
})
# Data Stat Summary
output$summarystatistic <- renderPrint({
psych::describe(data)
})
# Test linear model assumptions
output$assump <- renderPlot({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
par(mfrow = c(2, 2))
plot(step.model)
})
# Test linear model assumptions
output$relative <- renderPlot({
if(method$input!="forward"){
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
plot(calc.relimp(step.model))
}
})
#Fitted values and residuals graph
output$Fittedgraph <- renderPlot({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
data$predicted <- predict(step.model)
data$residuals <- residuals(step.model)
ggplot(data, aes(x = data[,input$examine], y = data[,input$outcome])) + xlab(input$examine)+
ylab(input$outcome)+
geom_segment(aes(xend = data[,input$examine], yend = predicted), alpha = .2) +  # Lines to connect points
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE) +  # Points of actual values
geom_point(aes(y = predicted), shape = 1) +  # Points of predicted values
theme_bw()
})
#Fitted and residuals values
output$value <- DT::renderDataTable({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
data$predicted <- predict(step.model)
data$residuals <- residuals(step.model)
t <-data %>% select(fit$terms[[2]], predicted, residuals)
DT::datatable(t, options = list(lengthChange = FALSE))
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(data, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(data[,input$examine], data[,input$outcome], main="Scatterplot",
xlab=input$examine, ylab=input$outcome, pch=19)})
# Histogram output var 1
output$distribution1 <- renderPlot({
t <-function(data, fill="deepskyblue2", bins=30){
index <- sapply(data, is.numeric)
qdata <- data[index]
qdata_long <- tidyr::gather(qdata)
ggplot2::ggplot(data=qdata_long, aes(x=value)) +
ggplot2::geom_histogram(fill=fill, bins=bins) +
ggplot2::facet_wrap(~key, scale="free") +
ggplot2::theme_bw() +
labs(title="Histograms")}
t(data)})
# Correlation Matrix
output$corrmatrix <- renderPlot({
M<-cor(data)
corrplot(M, method="color")
}
)
}
shinyApp(ui = ui, server = server)
}
SteplmSh(Boston)
SteplmSh <- function(data){
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(MASS)){
install.packages("MASS")
library(MASS)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
ui <- fluidPage(
titlePanel("Stepwise Regression Model" ),
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = colnames(data), selected = 1),
selectInput("method", label = h3("Stepwise Method"),
choices = c("both", "forward", "backward"), selected = 1),
selectInput("examine", label = h3("Choose an Explanatory Variable to Examine"),
choices = colnames(data), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot", height = "700px")), # Plot
tabPanel("Distribution", # Plots of data distributions
fluidRow(
column(6, plotOutput("distribution1", height = "700px", width = "700px")),
column(6, plotOutput("distribution2", height = "300px", width = "300px")))
),
tabPanel("Stepwise Model and Summary Statistics", verbatimTextOutput("summary"), verbatimTextOutput(outputId = 'summarystatistic'), verbatimTextOutput(outputId = 'mml')),
tabPanel("Relative Importance", plotOutput("relative")),
tabPanel("Linear Regression Assumptions", plotOutput("assump")),
tabPanel("Fitted and residuals graph", plotOutput("Fittedgraph")),
tabPanel("Data", DT::dataTableOutput('tbl')), # Data as datatable
tabPanel("Corrmatrix", plotOutput("corrmatrix"), height="700px")
)
)
)
)
# SERVER
server <- function(input, output) {
# Multiple Linear Regression output
output$summary <- renderPrint({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
summary(step.model)
})
# Data Stat Summary
output$summarystatistic <- renderPrint({
psych::describe(data)
})
# Test linear model assumptions
output$assump <- renderPlot({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
par(mfrow = c(2, 2))
plot(step.model)
})
# Test linear model assumptions
output$relative <- renderPlot({
if(input$method!="forward"){
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
plot(calc.relimp(step.model))
}
})
#Fitted values and residuals graph
output$Fittedgraph <- renderPlot({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
data$predicted <- predict(step.model)
data$residuals <- residuals(step.model)
ggplot(data, aes(x = data[,input$examine], y = data[,input$outcome])) + xlab(input$examine)+
ylab(input$outcome)+
geom_segment(aes(xend = data[,input$examine], yend = predicted), alpha = .2) +  # Lines to connect points
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE) +  # Points of actual values
geom_point(aes(y = predicted), shape = 1) +  # Points of predicted values
theme_bw()
})
#Fitted and residuals values
output$value <- DT::renderDataTable({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
data$predicted <- predict(step.model)
data$residuals <- residuals(step.model)
t <-data %>% select(fit$terms[[2]], predicted, residuals)
DT::datatable(t, options = list(lengthChange = FALSE))
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(data, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(data[,input$examine], data[,input$outcome], main="Scatterplot",
xlab=input$examine, ylab=input$outcome, pch=19)})
# Histogram output var 1
output$distribution1 <- renderPlot({
t <-function(data, fill="deepskyblue2", bins=30){
index <- sapply(data, is.numeric)
qdata <- data[index]
qdata_long <- tidyr::gather(qdata)
ggplot2::ggplot(data=qdata_long, aes(x=value)) +
ggplot2::geom_histogram(fill=fill, bins=bins) +
ggplot2::facet_wrap(~key, scale="free") +
ggplot2::theme_bw() +
labs(title="Histograms")}
t(data)})
# Correlation Matrix
output$corrmatrix <- renderPlot({
M<-cor(data)
corrplot(M, method="color")
}
)
}
shinyApp(ui = ui, server = server)
}
SteplmSh(Boston)
library(relaimpo)
SteplmSh <- function(data){
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(MASS)){
install.packages("MASS")
library(MASS)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
ui <- fluidPage(
titlePanel("Stepwise Regression Model" ),
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = colnames(data), selected = 1),
selectInput("method", label = h3("Stepwise Method"),
choices = c("both", "forward", "backward"), selected = 1),
selectInput("examine", label = h3("Choose an Explanatory Variable to Examine"),
choices = colnames(data), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot", height = "700px")), # Plot
tabPanel("Distribution", # Plots of data distributions
fluidRow(
column(6, plotOutput("distribution1", height = "700px", width = "700px")),
column(6, plotOutput("distribution2", height = "300px", width = "300px")))
),
tabPanel("Stepwise Model and Summary Statistics", verbatimTextOutput("summary"), verbatimTextOutput(outputId = 'summarystatistic'), verbatimTextOutput(outputId = 'mml')),
tabPanel("Relative Importance", plotOutput("relative")),
tabPanel("Linear Regression Assumptions", plotOutput("assump")),
tabPanel("Fitted and residuals graph", plotOutput("Fittedgraph")),
tabPanel("Data", DT::dataTableOutput('tbl')), # Data as datatable
tabPanel("Corrmatrix", plotOutput("corrmatrix"), height="700px")
)
)
)
)
# SERVER
server <- function(input, output) {
# Multiple Linear Regression output
output$summary <- renderPrint({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
summary(step.model)
})
# Data Stat Summary
output$summarystatistic <- renderPrint({
psych::describe(data)
})
# Test linear model assumptions
output$assump <- renderPlot({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
par(mfrow = c(2, 2))
plot(step.model)
})
# Test linear model assumptions
output$relative <- renderPlot({
if(input$method!="forward"){
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
plot(calc.relimp(step.model))
}
})
#Fitted values and residuals graph
output$Fittedgraph <- renderPlot({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
data$predicted <- predict(step.model)
data$residuals <- residuals(step.model)
ggplot(data, aes(x = data[,input$examine], y = data[,input$outcome])) + xlab(input$examine)+
ylab(input$outcome)+
geom_segment(aes(xend = data[,input$examine], yend = predicted), alpha = .2) +  # Lines to connect points
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE) +  # Points of actual values
geom_point(aes(y = predicted), shape = 1) +  # Points of predicted values
theme_bw()
})
#Fitted and residuals values
output$value <- DT::renderDataTable({
fit <- lm(reformulate(colnames(data), input$outcome), data=data)
step.model <- stepAIC(fit, direction = input$method,
trace = FALSE)
data$predicted <- predict(step.model)
data$residuals <- residuals(step.model)
t <-data %>% select(fit$terms[[2]], predicted, residuals)
DT::datatable(t, options = list(lengthChange = FALSE))
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(data, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(data[,input$examine], data[,input$outcome], main="Scatterplot",
xlab=input$examine, ylab=input$outcome, pch=19)})
# Histogram output var 1
output$distribution1 <- renderPlot({
t <-function(data, fill="deepskyblue2", bins=30){
index <- sapply(data, is.numeric)
qdata <- data[index]
qdata_long <- tidyr::gather(qdata)
ggplot2::ggplot(data=qdata_long, aes(x=value)) +
ggplot2::geom_histogram(fill=fill, bins=bins) +
ggplot2::facet_wrap(~key, scale="free") +
ggplot2::theme_bw() +
labs(title="Histograms")}
t(data)})
# Correlation Matrix
output$corrmatrix <- renderPlot({
M<-cor(data)
corrplot(M, method="color")
}
)
}
shinyApp(ui = ui, server = server)
}
SteplmSh(Boston)
